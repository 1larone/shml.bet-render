import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from aiogram.filters import Command
from aiogram import F
import asyncio
from datetime import datetime

# Get API token from environment variable with fallback
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8337218457:AAGo9Jxfa3X1IYUtY3x80PtDoVBaAk9Ycwo')

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# Available currencies for betting
FAKE_CURRENCIES = ['üíµ USD', 'üí∂ EUR', 'üí∏ UAH', 'ü™ô BTC', 'üü£ ETH']

# Current exchange rates to UAH (updated July 24, 2025)
EXCHANGE_RATES = {
    'USD': 41.18,
    'EUR': 47.87,
    'UAH': 1.0,
    'BTC': 4526731.0,
    'ETH': 152462.0
}

# Initialize dynamic settings on startup (after import)
def get_current_coefficients():
    """Get current coefficients from settings"""
    return bot_settings.get_coefficients()

def get_current_exchange_rates():
    """Get current exchange rates from settings"""  
    return bot_settings.get_exchange_rates()

# Betting coefficients for teams (will be loaded after imports)
COEFFICIENTS = {}
EXCHANGE_RATES = {}

# Admin user IDs - replace with actual admin user IDs
ADMINS = [5118163519]  # Replace with actual Telegram user_id

# Import shared data management
import data_sync
import bot_settings

# Use shared data structures
user_state = data_sync.user_state
user_bets = data_sync.user_bets
user_balances = data_sync.user_balances

def get_main_menu():
    """Create main menu with balance and bet info (betting only through WebApp)"""
    buttons = [
        [InlineKeyboardButton(text="üí∞ –ë–ê–õ–ê–ù–°", callback_data="show_balance")],
        [InlineKeyboardButton(text="üìä –ú–û–Ø –°–¢–ê–í–ö–ê", callback_data="my_bet")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    return markup

def convert_to_uah(amount, currency):
    """Convert amount from given currency to UAH"""
    return data_sync.convert_to_uah(amount, currency)

def get_currency_code(currency_with_emoji):
    """Extract currency code from emoji string"""
    return currency_with_emoji.split(' ')[-1]

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    """Handle /start command - welcome message with balance and betting info"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ CS2üî´\n\n"
        "üéØ *–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –°–¢–ê–í–ö–ò —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞*\n\n"
        "üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, UAH, BTC, ETH\n"
        "üèÜ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: Sovkamax (1.82) | Faze (2.22)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

@dp.message(Command("help"))
async def show_help(message: types.Message):
    """Handle /help command - show available commands"""
    user_id = message.from_user.id
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/mybet ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
    )
    
    # Add admin commands if user is admin
    if user_id in ADMINS:
        help_text += (
            "\nüîí –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/win <–∫–æ–º–∞–Ω–¥–∞> ‚Äî –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (Sovkamax –∏–ª–∏ Faze)\n"
            "/resetbets ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏\n"
            "/newmatch ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á\n"
        )
    await message.answer(help_text)

@dp.message(Command("mybet"))
async def show_my_bet(message: types.Message):
    """Handle /mybet command - show user's current bet"""
    user_id = message.from_user.id
    
    # Reload data to get latest state from file
    data_sync.reload_data()
    
    if user_id not in data_sync.user_state or "bet" not in data_sync.user_state[user_id]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á.")
        return
    
    state = data_sync.user_state[user_id]
    team_name = 'Sovkamax' if state['team'] == 'Sovkamax' else 'Faze'
    team_display = '*üßë‚Äçüíº Sovkamax*' if state['team'] == 'Sovkamax' else '*Faze ü¶Ö*'
    win_sum = state['bet'] * state['coef']
    
    await message.answer(
        f"üéØ *–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:*\n\n"
        f"üí∞ –°—É–º–º–∞: {state['bet']} {state['currency']}\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_display}\n"
        f"üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {state['coef']}\n"
        f"üéâ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {win_sum:.2f} {state['currency']}",
        parse_mode="Markdown"
    )

@dp.message(Command("balance"))
async def show_balance_command(message: types.Message):
    """Handle /balance command - show user's balance"""
    user_id = message.from_user.id
    # Reload data to get latest balance from file
    data_sync.reload_data()
    balance = data_sync.user_balances.get(user_id, 0.0)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} UAH")

@dp.message(Command("resetbets"))
async def reset_bets(message: types.Message):
    """Admin command - reset all bets"""
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    data_sync.clear_all_bets()
    await message.answer("–í—Å–µ —Å—Ç–∞–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á!")

@dp.message(Command("newmatch"))
async def new_match(message: types.Message):
    """Admin command - start new match"""
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    data_sync.clear_all_bets()
    await message.answer("–ù–æ–≤—ã–π –º–∞—Ç—á! –°—Ç–∞–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —É—á–∞—Å—Ç–∏—è.")

@dp.callback_query(F.data == "show_balance")
async def show_balance_callback(callback: types.CallbackQuery):
    """Handle balance button click - show user's balance with deposit option"""
    user_id = callback.from_user.id
    # Reload data to get latest balance from file
    data_sync.reload_data()
    balance = data_sync.user_balances.get(user_id, 0.0)
    
    # Create inline keyboard with deposit option
    markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit_balance")]]
    )
    
    await callback.message.answer(
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {balance:.2f} UAH\n\n"
        f"üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:*\n"
        f"üíµ 1 USD = {EXCHANGE_RATES['USD']:.2f} UAH\n"
        f"üí∂ 1 EUR = {EXCHANGE_RATES['EUR']:.2f} UAH\n"
        f"ü™ô 1 BTC = {EXCHANGE_RATES['BTC']:,.0f} UAH\n"
        f"üü£ 1 ETH = {get_current_exchange_rates()['ETH']:,.0f} UAH\n\n"
        f"üí° *–í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ UAH*",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "deposit_balance")
async def deposit_balance_callback(callback: types.CallbackQuery):
    """Handle deposit button click - show currency selection"""
    user_id = callback.from_user.id
    
    # Store that user wants to deposit
    if user_id not in user_state:
        user_state[user_id] = {}
    user_state[user_id]["action"] = "deposit"
    
    # Create currency selection keyboard
    buttons = [KeyboardButton(text=currency) for currency in FAKE_CURRENCIES]
    markup = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)
    
    await callback.message.answer(
        "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        f"üíµ 1 USD = {get_current_exchange_rates()['USD']:.2f} UAH\n"
        f"üí∂ 1 EUR = {get_current_exchange_rates()['EUR']:.2f} UAH\n"
        f"ü™ô 1 BTC = {get_current_exchange_rates()['BTC']:,.0f} UAH\n"
        f"üü£ 1 ETH = {get_current_exchange_rates()['ETH']:,.0f} UAH\n\n"
        f"üí° *–í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ UAH –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É*",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "my_bet")
async def show_my_bet(callback: types.CallbackQuery):
    """Show user's current bet information"""
    user_id = str(callback.from_user.id)
    
    # Reload data to get latest state
    data_sync.reload_data()
    
    if user_id not in data_sync.user_state or user_id not in data_sync.user_bets:
        await callback.message.answer(
            "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ*\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á\n\n"
            "üéØ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–¢–ê–í–ö–ò* —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    bet_info = data_sync.user_state[user_id]
    team = bet_info.get("team", "Unknown")
    currency = bet_info.get("currency", "UAH")
    bet_amount = bet_info.get("bet", 0)
    coef = bet_info.get("coef", 1.0)
    bet_uah = bet_info.get("bet_uah", bet_amount)
    
    potential_win = bet_amount * coef
    potential_win_uah = bet_uah * coef
    
    team_emoji = "üßë‚Äçüíº" if team == "Sovkamax" else "ü¶Ö"
    
    await callback.message.answer(
        f"üìä *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞*\n\n"
        f"{team_emoji} *–ö–æ–º–∞–Ω–¥–∞:* {team}\n"
        f"üí∞ *–°—É–º–º–∞:* {bet_amount} {get_currency_code(currency)}\n"
        f"üí± *–í –≥—Ä–∏–≤–Ω–∞—Ö:* {bet_uah:.2f} UAH\n"
        f"üìà *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {coef}\n"
        f"üèÜ *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:* {potential_win:.2f} {get_currency_code(currency)} ({potential_win_uah:.2f} UAH)\n\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞...",
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """Help command - show available commands"""
    await message.answer(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üéØ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üí∞ `/balance` - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –ë–ê–õ–ê–ù–°)\n"
        "üìä `/mybet` - –ú–æ—è —Å—Ç–∞–≤–∫–∞ (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –ú–û–Ø –°–¢–ê–í–ö–ê)\n"
        "‚ùì `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üéØ *–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:*\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–¢–ê–í–ö–ò* —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞\n\n"
        "üí° *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:*\n"
        "üíµ USD | üí∂ EUR | üí∏ UAH | ü™ô BTC | üü£ ETH",
        parse_mode="Markdown"
    )

@dp.message(Command("balance"))
async def balance_command(message: types.Message):
    """Balance command - show user balance"""
    user_id = str(message.from_user.id)
    data_sync.reload_data()
    balance = data_sync.user_balances.get(user_id, 0.0)
    rates = get_current_exchange_rates()
    
    await message.answer(
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} UAH*\n\n"
        f"üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:*\n"
        f"üíµ 1 USD = {rates['USD']:.2f} UAH\n"
        f"üí∂ 1 EUR = {rates['EUR']:.2f} UAH\n"
        f"ü™ô 1 BTC = {rates['BTC']:,.0f} UAH\n"
        f"üü£ 1 ETH = {rates['ETH']:,.0f} UAH\n\n"
        f"üí° *–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ë–ê–õ–ê–ù–°*",
        parse_mode="Markdown"
    )

@dp.message(Command("mybet"))
async def mybet_command(message: types.Message):
    """My bet command - show user's bet"""
    user_id = str(message.from_user.id)
    data_sync.reload_data()
    
    if user_id not in data_sync.user_state or user_id not in data_sync.user_bets:
        await message.answer(
            "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ*\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á\n\n"
            "üéØ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–¢–ê–í–ö–ò* —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞",
            parse_mode="Markdown"
        )
        return
    
    bet_info = data_sync.user_state[user_id]
    team = bet_info.get("team", "Unknown")
    currency = bet_info.get("currency", "UAH")
    bet_amount = bet_info.get("bet", 0)
    coef = bet_info.get("coef", 1.0)
    bet_uah = bet_info.get("bet_uah", bet_amount)
    
    potential_win = bet_amount * coef
    potential_win_uah = bet_uah * coef
    
    team_emoji = "üßë‚Äçüíº" if team == "Sovkamax" else "ü¶Ö"
    
    await message.answer(
        f"üìä *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞*\n\n"
        f"{team_emoji} *–ö–æ–º–∞–Ω–¥–∞:* {team}\n"
        f"üí∞ *–°—É–º–º–∞:* {bet_amount} {get_currency_code(currency)}\n"
        f"üí± *–í –≥—Ä–∏–≤–Ω–∞—Ö:* {bet_uah:.2f} UAH\n"
        f"üìà *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {coef}\n"
        f"üèÜ *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:* {potential_win:.2f} {get_currency_code(currency)} ({potential_win_uah:.2f} UAH)\n\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞...",
        parse_mode="Markdown"
    )

@dp.message(F.text.in_(FAKE_CURRENCIES))
async def currency_chosen(message: types.Message):
    """Handle currency selection for deposit only"""
    user_id = message.from_user.id
    currency = message.text
    
    # Check if user is in deposit mode
    if user_id in user_state and user_state[user_id].get("action") == "deposit":
        # User is depositing - show amount selection
        user_state[user_id]["deposit_currency"] = currency
        
        # Create amount selection based on currency
        if currency in ['üíµ USD', 'üí∂ EUR']:
            amounts = ['10', '50', '100', '500', '1000']
        elif currency == 'üí∏ UAH':
            amounts = ['500', '1000', '5000', '10000', '25000']
        elif currency in ['ü™ô BTC', 'üü£ ETH']:
            amounts = ['0.001', '0.01', '0.1', '0.5', '1.0']
        else:
            amounts = ['10', '50', '100', '500', '1000']
        
        currency_code = get_currency_code(currency)
        buttons = [KeyboardButton(text=f"{amount} {currency_code} üí∞") for amount in amounts]
        markup = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)
        
        rate = EXCHANGE_RATES[currency_code]
        await message.answer(
            f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ {currency}*\n\n"
            f"üìä –ö—É—Ä—Å: 1 {currency_code} = {rate:.2f} UAH\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
            reply_markup=markup,
            parse_mode="Markdown"
        )
        return
    
    # For betting, direct user to WebApp
    await message.answer(
        "üéØ *–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–¢–ê–í–ö–ò* —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
        parse_mode="Markdown"
    )



@dp.message(~F.text.startswith('/'))
async def process_deposit_amount_only(message: types.Message):
    """Handle deposit amount input only (betting moved to WebApp)"""
    user_id = message.from_user.id
    
    # Check if user is depositing
    if user_id in user_state and user_state[user_id].get("action") == "deposit":
        await process_deposit_amount(message)
        return
    
    # For any other message, guide user to WebApp for betting
    await message.answer(
        "üéØ *–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–¢–ê–í–ö–ò* —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
        parse_mode="Markdown"
    )

async def process_deposit_amount(message: types.Message):
    """Process deposit amount from user"""
    user_id = message.from_user.id
    
    # Check if user has selected currency
    if user_id not in user_state or "deposit_currency" not in user_state[user_id]:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start ‚Üí –ë–ê–õ–ê–ù–° ‚Üí –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return
    
    currency = user_state[user_id]["deposit_currency"]
    
    # Parse deposit amount from message
    deposit_text = message.text.replace("üí∞", "").replace(" ", "").strip()
    # Remove currency symbols
    for curr in ['UAH', 'USD', 'EUR', 'BTC', 'ETH', 'üíµ', 'üí∂', 'üí∏', 'ü™ô', 'üü£']:
        deposit_text = deposit_text.replace(curr, "")
    
    try:
        amount = float(deposit_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return
    
    # Validate amount
    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    # Convert to UAH
    amount_uah = convert_to_uah(amount, currency)
    
    # Check max deposit in UAH
    if amount_uah > 50000:
        max_in_currency = 50000 / get_current_exchange_rates()[get_currency_code(currency)]
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {max_in_currency:.2f} {get_currency_code(currency)} (50,000 UAH)")
        return
    
    # Reload data to get latest balance
    data_sync.reload_data()
    
    print(f"BOT DEPOSIT DEBUG: user_id={user_id}, amount={amount} {get_currency_code(currency)}, amount_uah={amount_uah}")
    
    # Get current balance BEFORE any operations
    current_balance = data_sync.user_balances.get(user_id, 0.0)
    print(f"BOT DEPOSIT DEBUG: current_balance before operations = {current_balance}")
    
    # Add deposit amount in UAH to existing balance (correct logic)
    new_balance = current_balance + amount_uah
    
    # Check balance limit after adding deposit
    if new_balance > 500000:
        await message.answer(
            f"‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞!*\n\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} UAH\n"
            f"üí± –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å: {amount:.2f} {get_currency_code(currency)} ({amount_uah:.2f} UAH)\n"
            f"üí≥ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} UAH\n"
            f"üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 500,000 UAH\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {500000 - current_balance:.2f} UAH",
            parse_mode="Markdown"
        )
        return
    
    # Set new balance (add UAH equivalent to existing)
    data_sync.user_balances[user_id] = new_balance
    print(f"BOT DEPOSIT DEBUG: added {amount_uah} UAH to {current_balance}, new balance = {new_balance}")
    
    # Clear any old match data for fresh start
    data_sync.reset_user_after_match(user_id)
    data_sync.save_data()
    
    # Clear deposit state
    if user_id in user_state and "action" in user_state[user_id]:
        del user_state[user_id]["action"]
        if "deposit_currency" in user_state[user_id]:
            del user_state[user_id]["deposit_currency"]
    
    currency_code = get_currency_code(currency)
    await message.answer(
        f"‚úÖ *–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!*\n\n"
        f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {amount:.2f} {currency_code} = {amount_uah:.2f} UAH\n"
        f"üìä –ö—É—Ä—Å: 1 {currency_code} = {get_current_exchange_rates()[currency_code]:.2f} UAH\n"
        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} UAH",
        parse_mode="Markdown"
    )

@dp.message(Command("win"))
async def announce_winner(message: types.Message):
    """Admin command - announce match winner and distribute payouts"""
    user_id = message.from_user.id
    
    # Check admin permissions
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    # Parse winner from command arguments
    args = message.text.split()
    current_coefficients = get_current_coefficients()
    if len(args) < 2 or args[1] not in current_coefficients:
        team1, team2 = bot_settings.get_team_names()
        await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è: /win {team1} –∏–ª–∏ /win {team2}")
        return
    
    winner = args[1]
    
    # Log admin action
    logging.info(f"Admin {user_id} announcing winner: {winner}")
    
    # Load data FIRST to get latest state including web app bets
    data_sync.reload_data()
    
    # Debug: Show current data state BEFORE processing
    logging.info(f"Processing results - Current state: {len(data_sync.user_state)} users, {len(data_sync.user_bets)} bets")
    logging.info(f"User states: {list(data_sync.user_state.keys())}")
    logging.info(f"User bets: {list(data_sync.user_bets)}")
    
    # Store results for web app AFTER loading data but BEFORE processing
    data_sync.set_match_result(winner)
    
    # Process all user bets from data_sync (includes both bot and web app bets)
    for bet_user_id, state in data_sync.user_state.items():
        team = state["team"]
        currency = state["currency"]
        coef = state["coef"]
        bet = state.get("bet", None)
        
        # Skip if user didn't complete their bet
        if bet is None:
            continue
        
        try:
            bet_uah = state.get("bet_uah", convert_to_uah(bet, currency))
            
            if team == winner:
                # User won - calculate winnings (only profit, not bet amount)
                win_sum = bet * coef  # total payout
                win_uah = convert_to_uah(win_sum, currency)  # total payout in UAH
                profit_uah = win_uah - bet_uah  # profit only (without bet amount)
                
                # Add full winnings to balance (bet was already deducted when betting)
                if bet_user_id not in data_sync.user_balances:
                    data_sync.user_balances[bet_user_id] = 0.0
                data_sync.user_balances[bet_user_id] += win_uah
                
                # Store result for web app
                data_sync.set_user_result(bet_user_id, {
                    'result': 'win',
                    'balance': data_sync.user_balances[bet_user_id],
                    'winnings': profit_uah,  # Use profit_uah instead of full win_uah
                    'winning_team': winner,
                    'user_team': team
                })
                
                currency_code = get_currency_code(currency)
                rate = get_current_exchange_rates()[currency_code]
                
                try:
                    await bot.send_message(
                        bet_user_id,
                        f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞!*\n\n"
                        f"üèÜ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {win_sum:.2f} {currency}\n"
                        f"üí∞ –í—ã–ø–ª–∞—Ç–∞: +{win_uah:.2f} UAH\n"
                        f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {data_sync.user_balances[bet_user_id]:.2f} UAH",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.warning(f"Could not send win message to {bet_user_id}: {e}")
            else:
                # User lost - balance already deducted when bet was placed
                # Do NOT deduct again - just store result and send notification
                
                # Store result for web app (balance already correct)
                data_sync.set_user_result(bet_user_id, {
                    'result': 'lose',
                    'balance': data_sync.user_balances[bet_user_id],
                    'lost': bet_uah,
                    'winning_team': winner,
                    'user_team': team
                })
                
                try:
                    await bot.send_message(
                        bet_user_id,
                        f"üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.*\n\n"
                        f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {bet:.2f} {currency}\n"
                        f"üìâ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: -{bet_uah:.2f} UAH\n"
                        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {data_sync.user_balances[bet_user_id]:.2f} UAH\n\n"
                        f"üçÄ *–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!*",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.warning(f"Could not send lose message to {bet_user_id}: {e}")
        except Exception as e:
            logging.error(f"Failed to send message to user {bet_user_id}: {e}")
    
    # Save all balance changes to file for web app sync
    data_sync.save_data()
    
    # Don't clear bets immediately - let web app process results first
    await message.answer(f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {winner}!\n\nüîÑ –°—Ç–∞–≤–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resetbets –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞.")

@dp.message(Command("resetbets"))
async def reset_bets(message: types.Message):
    """Admin command - clear all bets for new match"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    data_sync.clear_all_bets()
    await message.answer("üîÑ –í—Å–µ —Å—Ç–∞–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á.")

# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ===

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    settings = bot_settings.load_settings()
    team1, team2 = bot_settings.get_team_names()
    coeffs = bot_settings.get_coefficients()
    
    await message.answer(
        f"üîß *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
        f"*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥—ã: {team1} vs {team2}\n"
        f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coeffs[team1]} | {coeffs[team2]}\n"
        f"üí∞ –ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞: {settings['max_bet_uah']:,} UAH\n"
        f"üí≥ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å: {settings['max_balance_uah']:,} UAH\n\n"
        f"*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:*\n"
        f"`/setteams –ù–∞–∑–≤–∞–Ω–∏–µ1 –ù–∞–∑–≤–∞–Ω–∏–µ2` - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥\n"
        f"`/setcoef 1.85 2.15` - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n"
        f"`/setlimits 50000 1000000` - –ª–∏–º–∏—Ç—ã (—Å—Ç–∞–≤–∫–∞, –±–∞–ª–∞–Ω—Å)\n"
        f"`/setrate USD 42.5` - –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n"
        f"`/settings` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"`/win –ö–æ–º–∞–Ω–¥–∞` - –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n"
        f"`/resetbets` - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏\n\n"
        f"üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n"
        f"`/setteams NAVI Astralis`\n"
        f"`/setcoef 1.75 2.35`\n"
        f"`/setrate BTC 4600000`",
        parse_mode="Markdown"
    )

@dp.message(Command("setteams"))
async def set_teams(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: /setteams Team1 Team2"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /setteams
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: `/setteams –ö–æ–º–∞–Ω–¥–∞1 –ö–æ–º–∞–Ω–¥–∞2`\n–ü—Ä–∏–º–µ—Ä: `/setteams NAVI Astralis`", parse_mode="Markdown")
        return
    
    team1 = args[0]
    team2 = args[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success1 = bot_settings.set_setting('teams', 'team1', team1)
    success2 = bot_settings.set_setting('teams', 'team2', team2)
    print(f"DEBUG setteams: set team1={team1} success={success1}, set team2={team2} success={success2}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global COEFFICIENTS
    COEFFICIENTS = get_current_coefficients()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º data_sync —Ç–æ–∂–µ
    data_sync.COEFFICIENTS = COEFFICIENTS
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    coeffs = bot_settings.get_coefficients()
    
    await message.answer(
        f"‚úÖ *–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
        f"üèÜ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: {team1} vs {team2}\n"
        f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coeffs[team1]} | {coeffs[team2]}",
        parse_mode="Markdown"
    )

@dp.message(Command("setcoef"))
async def set_coefficients(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: /setcoef 1.85 2.15"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: `/setcoef –∫–æ—ç—Ñ1 –∫–æ—ç—Ñ2`\n–ü—Ä–∏–º–µ—Ä: `/setcoef 1.85 2.15`", parse_mode="Markdown")
        return
    
    try:
        coef1 = float(args[0])
        coef2 = float(args[1])
        
        if coef1 < 1.0 or coef2 < 1.0:
            await message.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 1.0")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success1 = bot_settings.set_setting('coefficients', 'team1', coef1)
        success2 = bot_settings.set_setting('coefficients', 'team2', coef2)
        print(f"DEBUG setcoef: set coef1={coef1} success={success1}, set coef2={coef2} success={success2}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        global COEFFICIENTS
        COEFFICIENTS = get_current_coefficients()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º data_sync —Ç–æ–∂–µ
        data_sync.COEFFICIENTS = COEFFICIENTS
        
        team1, team2 = bot_settings.get_team_names()
        await message.answer(
            f"‚úÖ *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            f"üìä {team1}: {coef1}\n"
            f"üìä {team2}: {coef2}",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

@dp.message(Command("setrate"))
async def set_exchange_rate(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã: /setrate USD 42.5"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: `/setrate –í–ê–õ–Æ–¢–ê –∫—É—Ä—Å`\n–ü—Ä–∏–º–µ—Ä: `/setrate USD 42.5`", parse_mode="Markdown")
        return
    
    currency = args[0].upper()
    valid_currencies = ['USD', 'EUR', 'BTC', 'ETH']
    
    if currency not in valid_currencies:
        await message.answer(f"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(valid_currencies)}")
        return
    
    try:
        rate = float(args[1])
        
        if rate <= 0:
            await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = bot_settings.set_setting('exchange_rates', currency, rate)
        print(f"DEBUG setrate: set {currency}={rate} success={success}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        global EXCHANGE_RATES
        EXCHANGE_RATES = get_current_exchange_rates()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º data_sync —Ç–æ–∂–µ
        data_sync.EXCHANGE_RATES = EXCHANGE_RATES
        
        await message.answer(
            f"‚úÖ *–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
            f"üí± 1 {currency} = {rate:,.2f} UAH",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

@dp.message(Command("setlimits"))
async def set_limits(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã: /setlimits –º–∞–∫—Å_—Å—Ç–∞–≤–∫–∞ –º–∞–∫—Å_–±–∞–ª–∞–Ω—Å"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: `/setlimits –º–∞–∫—Å_—Å—Ç–∞–≤–∫–∞ –º–∞–∫—Å_–±–∞–ª–∞–Ω—Å`\n–ü—Ä–∏–º–µ—Ä: `/setlimits 50000 1000000`", parse_mode="Markdown")
        return
    
    try:
        max_bet = float(args[0])
        max_balance = float(args[1])
        
        if max_bet <= 0 or max_balance <= 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success1 = bot_settings.set_setting('max_bet_uah', None, max_bet)
        success2 = bot_settings.set_setting('max_balance_uah', None, max_balance)
        print(f"DEBUG setlimits: set max_bet={max_bet} success={success1}, max_balance={max_balance} success={success2}")
        
        await message.answer(
            f"‚úÖ *–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            f"üí∞ –ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞: {max_bet:,.0f} UAH\n"
            f"üí≥ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å: {max_balance:,.0f} UAH",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer("‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

@dp.message(Command("setemoji"))
async def set_emoji(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã  
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) != 2:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setemoji <emoji1> <emoji2>`\n"
            f"–ü—Ä–∏–º–µ—Ä: `/setemoji üî• ‚ö°`\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ —ç–º–æ–¥–∑–∏, –≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Telegram",
            parse_mode="Markdown"
        )
        return
    
    emoji1 = args[0]
    emoji2 = args[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success1 = bot_settings.set_setting('team_emojis', 'team1', emoji1)
    success2 = bot_settings.set_setting('team_emojis', 'team2', emoji2)
    print(f"DEBUG setemoji: set emoji1={emoji1} success={success1}, emoji2={emoji2} success={success2}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    team1, team2 = bot_settings.get_team_names()
    
    await message.answer(
        f"‚úÖ *–≠–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
        f"{emoji1} {team1}\n"
        f"{emoji2} {team2}",
        parse_mode="Markdown"
    )

@dp.message(Command("settings"))
async def show_all_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = message.from_user.id
    
    if user_id not in ADMINS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    
    settings = bot_settings.load_settings()
    team1, team2 = bot_settings.get_team_names()
    coeffs = bot_settings.get_coefficients()
    rates = bot_settings.get_exchange_rates()
    
    await message.answer(
        f"‚öôÔ∏è *–í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê*\n\n"
        f"*üèÜ –ö–û–ú–ê–ù–î–´:*\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 1: {team1}\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 2: {team2}\n\n"
        f"*üìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´:*\n"
        f"‚Ä¢ {team1}: {coeffs[team1]}\n"
        f"‚Ä¢ {team2}: {coeffs[team2]}\n\n"
        f"*üí± –ö–£–†–°–´ –í–ê–õ–Æ–¢:*\n"
        f"‚Ä¢ 1 USD = {rates['USD']:,.2f} UAH\n"
        f"‚Ä¢ 1 EUR = {rates['EUR']:,.2f} UAH\n"
        f"‚Ä¢ 1 BTC = {rates['BTC']:,.0f} UAH\n"
        f"‚Ä¢ 1 ETH = {rates['ETH']:,.0f} UAH\n\n"
        f"*üí∞ –õ–ò–ú–ò–¢–´:*\n"
        f"‚Ä¢ –ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞: {settings['max_bet_uah']:,.0f} UAH\n"
        f"‚Ä¢ –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: {settings['min_bet_uah']:,.0f} UAH\n"
        f"‚Ä¢ –ú–∞–∫—Å. –±–∞–ª–∞–Ω—Å: {settings['max_balance_uah']:,.0f} UAH\n"
        f"‚Ä¢ –ú–∞–∫—Å. –¥–µ–ø–æ–∑–∏—Ç: {settings['max_deposit_uah']:,.0f} UAH",
        parse_mode="Markdown"
    )

async def uptime_monitor():
    """Anti-sleep monitoring task - logs uptime status every 4 minutes"""
    while True:
        await asyncio.sleep(240)  # 4 minutes
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        active_users = len(user_state)
        total_bets = len(user_bets)
        logging.info(f"üü¢ UptimeBot: Bot is active [{current_time}] | Users: {active_users} | Bets: {total_bets}")

async def set_bot_commands():
    """Set bot commands and menu button"""
    from aiogram.types import BotCommand, MenuButtonWebApp
    
    # Set list of commands that appear in menu
    commands = [
        BotCommand(command="start", description="üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="balance", description="üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="mybet", description="üìä –ú–æ—è —Å—Ç–∞–≤–∫–∞"),
        BotCommand(command="admin", description="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="setemoji", description="üòÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="win", description="üèÜ –û–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"),
        BotCommand(command="resetbets", description="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–≤–∫–∏"),
    ]
    await bot.set_my_commands(commands)
    
    # Set the menu button to open Web App
    web_app_url = f"https://{os.getenv('REPLIT_DOMAINS', 'localhost:5000')}/"
    menu_button = MenuButtonWebApp(text="–°–¢–ê–í–ö–ò", web_app=WebAppInfo(url=web_app_url))
    await bot.set_chat_menu_button(menu_button=menu_button)
    
    logging.info(f"‚úÖ Bot commands and menu button set (Web App: {web_app_url})")

async def main():
    """Main function to start the bot"""
    logging.info("Starting CS2 Betting Bot...")
    try:
        # Initialize settings after all imports are done
        global COEFFICIENTS, EXCHANGE_RATES
        COEFFICIENTS = get_current_coefficients()
        EXCHANGE_RATES = get_current_exchange_rates()
        logging.info(f"Settings loaded: Teams={list(COEFFICIENTS.keys())}, Coeffs={COEFFICIENTS}")
        
        # Set bot commands and menu button
        await set_bot_commands()
        
        # Start uptime monitoring task
        asyncio.create_task(uptime_monitor())
        logging.info("üü¢ UptimeBot: Anti-sleep monitoring started (4 min intervals)")
        
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Bot failed to start: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
