"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import json
import os
from threading import Lock

SETTINGS_FILE = 'bot_settings.json'
LOCK = Lock()

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_SETTINGS = {
    "teams": {
        "team1": "Sovkamax",
        "team2": "Faze"
    },
    "coefficients": {
        "team1": 1.82,
        "team2": 2.22
    },
    "team_emojis": {
        "team1": "üßë‚Äçüíº",
        "team2": "ü¶Ö"
    },
    "exchange_rates": {
        "USD": 41.18,
        "EUR": 47.87,
        "UAH": 1.0,
        "BTC": 4526731.0,
        "ETH": 152462.0
    },
    "max_bet_uah": 100000,
    "min_bet_uah": 10,
    "max_balance_uah": 500000,
    "max_deposit_uah": 10000
}

def load_settings():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å
                for key in DEFAULT_SETTINGS:
                    if key not in settings:
                        settings[key] = DEFAULT_SETTINGS[key]
                return settings
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    return DEFAULT_SETTINGS.copy()

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with LOCK:
            with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {settings}")
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def get_setting(key, subkey=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    settings = load_settings()
    if subkey:
        return settings.get(key, {}).get(subkey)
    return settings.get(key)

def set_setting(key, subkey, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    settings = load_settings()
    print(f"DEBUG set_setting: key={key}, subkey={subkey}, value={value}")
    
    if subkey:
        if key not in settings:
            settings[key] = {}
        settings[key][subkey] = value
        print(f"DEBUG set_setting: updated {key}.{subkey} = {value}")
    else:
        settings[key] = value
        print(f"DEBUG set_setting: updated {key} = {value}")
    
    success = save_settings(settings)
    print(f"DEBUG set_setting: save_settings returned {success}")
    return success

def get_team_names():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    teams = get_setting('teams')
    return teams['team1'], teams['team2']

def get_coefficients():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
    coefficients = get_setting('coefficients')
    team1, team2 = get_team_names()
    return {team1: coefficients['team1'], team2: coefficients['team2']}

def get_exchange_rates():
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    return get_setting('exchange_rates')

def get_team_emojis():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥"""
    emojis = get_setting('team_emojis')
    team1, team2 = get_team_names()
    return {team1: emojis['team1'], team2: emojis['team2']}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
current_settings = load_settings()